<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <title>‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä‡∏ñ‡∏±‡πà‡∏ß‡πÅ‡∏£‡∏∞‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>
  <script src="https://cdn.sheetjs.com/xlsx-0.20.0/package/dist/xlsx.full.min.js"></script>
  <style>
    body {
      font-family: sans-serif;
      max-width: 800px;
      margin: auto;
      padding: 20px;
    }
    h1 {
      text-align: center;
    }
    label {
      display: block;
      margin-top: 10px;
    }
    input[type="number"] {
      width: 100%;
      padding: 5px;
      font-size: 1rem;
    }
    button {
      margin-top: 15px;
      padding: 10px;
      font-size: 1rem;
      background-color: #007bff;
      color: white;
      border: none;
      cursor: pointer;
      border-radius: 5px;
      margin-right: 10px;
    }
    canvas {
      margin-top: 40px;
    }
    .note {
      background-color: #f9f9f9;
      padding: 10px;
      border-left: 5px solid #007bff;
      margin-top: 20px;
      font-size: 0.95rem;
    }
    .entry-preview {
      margin-top: 20px;
      background-color: #eef;
      padding: 10px;
      border-radius: 5px;
    }
  </style>
</head>
<body>

<h1>‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä‡πÉ‡∏ô‡∏ñ‡∏±‡πà‡∏ß‡πÅ‡∏£‡∏∞‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô</h1>
<form id="surveyForm">
  <div id="inputFields"></div>
</form>

<div style="margin-top: 10px;">
  <button onclick="confirmEntry()">‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</button>
  <button onclick="undoLastEntry()">‚Ü©Ô∏è ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö</button>
  <button onclick="clearData()" style="background-color: #dc3545;">üóëÔ∏è ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</button>
  <button onclick="downloadExcel()">üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel</button>
</div>

<canvas id="summaryChart" width="800" height="400"></canvas>

<div class="note">
  <strong>üìå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î:</strong>
  <ul>
    <li>ü¶ü ‡πÅ‡∏°‡∏•‡∏á‡∏´‡∏ß‡∏µ‡πà‡∏Ç‡∏≤‡∏ß: ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏ô = ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î</li>
    <li>üêõ ‡∏´‡∏ô‡∏≠‡∏ô‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡πÉ‡∏ö: 4 ‡∏ï‡πâ‡∏ô‡∏û‡∏ö 1 ‡∏ï‡∏±‡∏ß = ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î</li>
    <li>üçÉ ‡πÇ‡∏£‡∏Ñ‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Ñ‡πÇ‡∏ô‡∏™: ‡∏û‡∏ö 1 ‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏∏‡πà‡∏° 10 ‡∏ï‡πâ‡∏ô = ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î</li>
    <li>ü™≥ ‡∏°‡∏ß‡∏ô‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á: ‡∏û‡∏ö 4 ‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 1 ‡πÄ‡∏°‡∏ï‡∏£ = ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î</li>
    <li>ü¶† ‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡∏≠‡πà‡∏≠‡∏ô: 5 ‡∏ï‡∏±‡∏ß‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î = ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î</li>
    <li>üåø ‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏π‡∏ô: ‡∏û‡∏ö 10 ‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å 50 ‡∏ï‡πâ‡∏ô = ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î</li>
    <li>üß´ ‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤‡πÇ‡∏Ñ‡∏ô‡πÄ‡∏ô‡πà‡∏≤: ‡∏û‡∏ö 10 ‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å 50 ‡∏ï‡πâ‡∏ô = ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î</li>
    <li>ü™∞ ‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏ô‡∏≠‡∏ô‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏≥‡∏ï‡πâ‡∏ô: ‡∏û‡∏ö 1 ‡∏ï‡∏±‡∏ß‡∏à‡∏≤‡∏Å 50 ‡∏ï‡πâ‡∏ô = ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î</li>
  </ul>
</div>

<script>
const pestLabels = [
  "‡πÅ‡∏°‡∏•‡∏á‡∏´‡∏ß‡∏µ‡πà‡∏Ç‡∏≤‡∏ß", "‡∏´‡∏ô‡∏≠‡∏ô‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡πÉ‡∏ö", "‡∏°‡∏ß‡∏ô‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á", "‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡∏≠‡πà‡∏≠‡∏ô",
  "‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏ô‡∏≠‡∏ô‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏≥‡∏ï‡πâ‡∏ô", "‡πÇ‡∏£‡∏Ñ‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Ñ‡πÇ‡∏ô‡∏™", "‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏π‡∏ô", "‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤‡πÇ‡∏Ñ‡∏ô‡πÄ‡∏ô‡πà‡∏≤"
];

const outbreakThresholds = {
  "‡πÅ‡∏°‡∏•‡∏á‡∏´‡∏ß‡∏µ‡πà‡∏Ç‡∏≤‡∏ß": 5,
  "‡∏´‡∏ô‡∏≠‡∏ô‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡πÉ‡∏ö": 0.25,
  "‡∏°‡∏ß‡∏ô‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á": 4,
  "‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡∏≠‡πà‡∏≠‡∏ô": 5,
  "‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏´‡∏ô‡∏≠‡∏ô‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏≥‡∏ï‡πâ‡∏ô": 1,
  "‡πÇ‡∏£‡∏Ñ‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Ñ‡πÇ‡∏ô‡∏™": 1,
  "‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏π‡∏ô": 10,
  "‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤‡πÇ‡∏Ñ‡∏ô‡πÄ‡∏ô‡πà‡∏≤": 10
};

let records = [];

function initForm() {
  const container = document.getElementById('inputFields');
  container.innerHTML = '';
  pestLabels.forEach(pest => {
    const label = document.createElement('label');
    label.innerHTML = `${pest}: <input type="number" step="0.01" name="${pest}" required>`;
    container.appendChild(label);
  });
}

function getCurrentEntry() {
  const inputs = document.querySelectorAll('#surveyForm input');
  const entry = {};
  inputs.forEach(input => {
    entry[input.name] = parseFloat(input.value) || 0;
  });
  return entry;
}

function confirmEntry() {
  const entry = getCurrentEntry();
  entry.timestamp = new Date().toISOString();
  records.push(entry);
  drawChart();
  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  document.querySelectorAll('#surveyForm input').forEach(input => input.value = '');
}

function undoLastEntry() {
  records.pop();
  drawChart();
}

function clearData() {
  if (confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?")) {
    records = [];
    drawChart();
  }
}

function downloadExcel() {
  if (records.length === 0) {
    alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î");
    return;
  }
  const fields = ['timestamp', ...pestLabels];
  const data = records.map(r => {
    const row = {};
    fields.forEach(f => row[f] = r[f] || 0);
    return row;
  });
  const ws = XLSX.utils.json_to_sheet(data);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, '‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä');
  XLSX.writeFile(wb, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏û‡∏∑‡∏ä.xlsx');
}

let chart;
function drawChart() {
  const labels = [
    "ü¶ü ‡πÅ‡∏°‡∏•‡∏á‡∏´‡∏ß‡∏µ‡πà‡∏Ç‡∏≤‡∏ß", "üêõ ‡∏´‡∏ô‡∏≠‡∏ô‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡πÉ‡∏ö", "ü™≥ ‡∏°‡∏ß‡∏ô‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á", "ü¶† ‡πÄ‡∏û‡∏•‡∏µ‡πâ‡∏¢‡∏≠‡πà‡∏≠‡∏ô",
    "ü™∞ ‡πÅ‡∏°‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏≥‡∏ï‡πâ‡∏ô", "üçÉ ‡πÇ‡∏£‡∏Ñ‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Ñ‡πÇ‡∏ô‡∏™", "üåø ‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏π‡∏ô", "üß´ ‡πÇ‡∏£‡∏Ñ‡∏£‡∏≤‡∏Å‡πÄ‡∏ô‡πà‡∏≤‡πÇ‡∏Ñ‡∏ô‡πÄ‡∏ô‡πà‡∏≤"
  ];
  const keys = Object.keys(outbreakThresholds);
  const totalValues = keys.map(key =>
    records.reduce((sum, rec) => sum + (rec[key] || 0), 0)
  );
  const thresholds = keys.map(key => outbreakThresholds[key]);

  const data = {
    labels,
    datasets: [
      {
        label: '‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏ö',
        data: totalValues,
        backgroundColor: 'rgba(0, 128, 255, 0.6)'
      },
      {
        label: '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏î',
        data: thresholds,
        backgroundColor: 'rgba(255, 99, 132, 0.6)'
      }
    ]
  };

  const config = {
    type: 'bar',
    data,
    options: {
      plugins: {
        datalabels: {
          anchor: 'end',
          align: 'top',
          color: '#000',
          font: { weight: 'bold' },
          formatter: Math.round
        }
      },
      scales: { y: { beginAtZero: true } }
    },
    plugins: [ChartDataLabels]
  };

  if (chart) chart.destroy();
  chart = new Chart(document.getElementById('summaryChart'), config);
}

initForm();
</script>

</body>
</html>
